#
https://www.baeldung.com/linux/jq-command-json
https://stedolan.github.io/jq/tutorial/

# Output a JSON file, in pretty-print format:
jq

# Output all elements from arrays
# (or all key-value pairs from objects) in a JSON file:
jq .[]

# Read JSON objects from a file into an array, and output it
# (inverse of jq .[]):
jq --slurp

# To pretty print the json:
jq "." < filename.json

# To access the value at key "foo":
jq '.foo'

# To access first list item:
jq '.[0]'

# Child selection:
jq '.some.property' test.json
#{
#  "some": {
#    "property": "yay!"
#  }
#}

# Output the value of a given key of the first element in a JSON file:
jq '.[0].' key_name

# to slice and dice:
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'

# Deleting Keys From JSON
jq 'del(.fruit.name)' fruit.json

# Mapping Values
jq 'map(has("name"))' fruits.json

# Finding Unique Values
jq 'map(.color) | unique' fruits.JSON
#[
#  "green",
#  "yellow"
#]

# Min and Max
jq '[.[].price] | min' fruits.json
jq '[.[].price] | max' fruits.json

# Slicing
echo '[1,2,3,4,5,6,7,8,9,10]' | jq '.[6:9]'
#[
#  7,
#  8,
#  9
#]

# Accessing by Index
jq '.[1].price' fruits.json

# Output the first element in a JSON file:
jq '.[0]' file.json

# API output full
curl https://catfact.ninja/facts | jq "."

# Output the value of a given key of the first element in a JSON text from `stdin`:
cat file.json | jq '.[0].key_name'

# API output second cildrenkey
curl https://catfact.ninja/facts | jq ".links[2]"

# API output mutliple values from 2nd array
curl https://catfact.ninja/facts | jq ".links[2] | .url,.label"

# Output the value of a given key of each element in a JSON text from `stdin`:
cat file.json | jq 'map(.key_name)'

# Output the value of multiple keys as a new JSON object (assuming the input JSON has the keys `key_name` and `other_key_name`):
cat file.json | jq '{my_new_key: .key_name, my_other_key: .other_key_name}'

# Combine multiple filters:
cat file.json | jq 'unique | sort | reverse'

# Output the value of a given key to a string (and disable JSON output):
cat file.json | jq --raw-output '"some text: \(.key_name)"'

# Output the value of a given key of each element in a JSON file:
jq 'map(.key_name)'
#
#     [ { foo: 1 }, { foo: 2 } ]
#     => [1, 2]

# Extract as stream of values instead of a list
jq '.[] | .foo'
#
#     [ { "foo": 1 }, { "foo": 2 } ]
#     => 1, 2

# Slicing
jq '.[1:2]'
#
#     [ { "foo": 1 }, { "foo": 2 } ]
#     => { "foo": 2 }

# Dictionary subset shorthand
jq 'map({ a, b })'
#
#     [ { "a": 1, "b": 2, "c": 3 }, ...]
#     => [ { "a": 1, "b": 2 }, ...]

# Converting arbitrary data to json
jq -r '(map(keys) | add | unique | sort) as $cols \
        | .[] as $row | $cols | map($row[.]) | @csv'
#
#     [ { "foo": 1, "bar": 2}, { "foo": 3, "baz": 4}]
#
#     => 2,,1
#      ,4,3

# Filter a list of objects
jq 'map(select(.name == "foo"))'
#
#     [ { "name": "foo" }, { "name": "bar" } ]
#     => [ { "name": "foo" } ]

#
#     ## mapping and transforming ##
#
# Add + 1 to all items
jq 'map(.+1)'


# select the value in id 4
jq -r 'map(select(.id == 4))[].body'
# .....
# ......
# {
  #   "postId": 1,
  #   "id": 4,
  #   "name": "vero eaque aliquid doloribus et culpa",
  #   "email": "Hayden@althea.biz",
  #   "body": "harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugit inventore cupiditate\nvoluptates magni quo et"
  # }

# Delete 2 items
jq 'del(.[1, 2])'

# Concatenate arrays
jq 'add'

# Flatten an array
jq 'flatten'
#
#     [[1], [2]]
#     => [1, 2]

# Create a range of numbers
jq '[range(2;4)]'

# Display the type of each item
jq 'map(type)'

# Sort an array of basic type
jq 'sort'
#
#     [3, 2, 1]
#     => [1, 2, 3]

# Sort an array of objects
jq 'sort_by(.foo)'

# Sort lines of a file
jq --slurp '. | sort | .[]'

# Group by a key - opposite to flatten
jq 'group_by(.foo)'

# Minimum value of an array
jq 'min'
# See also min, max, min_by(path_exp), max_by(path_exp)

# Remove duplicates
jq 'unique'
# or
jq 'unique_by(.foo)'
# or
jq 'unique_by(length)'
#
#   [1, 1, 2, 1]
#   => [1, 2]

# Reverse an array
jq 'reverse'

#
#   ## jq in shell scripts ##
#

# URL Encode something
date | jq -sRr @uri
# Thu%2021%20May%202020%2012%3A40%3A40%20PM%20CEST%0A

# To create proper JSON from a shell script and properly escape variables:
jq -n --arg foobaz "$FOOBAZ" '{"foobaz":$foobaz}'

# To fill environment variables from JSON object keys
# (e.g. $FOO from jq query ".foo")
export $(jq -r '@sh "FOO=\(.foo) BAZ=\(.baz)"')


#
#   ## Input/output formats ##
#

# Parsing json
jq 'with_entries(.value |= fromjson)' --sort-keys
#
#     { "b": "{}", "a": "{}" }
#     =>  { "a": {}, "b": {} }

# Serializing json
#
jq 'with_entries(.value |= tojson)' --sort-keys
#
#     { "a": {}, "b": {} }
#     => { "a": "{}", "b": "{}" }

# Converting to csv
jq '.[] | [.foo, .bar] | @csv' -r
#
#     [{ "foo": 1, "bar": 2, "baz":3 }]
#     => 1,2

# Iterate over key value (loop)
jq -r ".[] | .AssetId" input.json
