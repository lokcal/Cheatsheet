---
syntax: bash
tags: [ git, version-control ]
---
explanation: Distributed version control system.

# API https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories

# To set your identity:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

# Styled git status
git status -sb

# Show last commit
git show

# show previous commit messages and find the most recent one matching the query.
git show :/query

# create an repository on Gihub via Cli
curl -u USERNAME:PASSWORD https://api.github.com/user/repos -d '{"name":"myDirName"}'
curl -i -H "Authorization: Bearer <token>" https://api.github.com/user/repos -d '{"name":"<repo-name>","private":true}'

# Pull/mirror private repositories API
https://[your-username]:[some-api-token]@github.com/Kovah/a-private-test.git

# Create repository and push
git init
git add . or (file)
git commit -m "first commit"
git branch -M main
git remote add origin http://ip:port/NAME/example.git
git remote add origin gitea://ip:port/NAME/example.git
git push --set-upstream origin master
git push - u origin master

# Create repository and push (github) over Api with fined-token
git init
git add . or (file)
git commit -m "first commit"
git branch -M main
curl -i -H "Authorization: Bearer <token>" https://api.github.com/user/repos -d '{"name":"<repo-name>","private":true}'
git push --set-upstream origin git:github.com:<username>/<repo-name>.git // git=:github... is ssh
git push - u origin master

# Create repository and push (github)
create at github a repo
git init
git add . or (file)
git commit -m "first commit"
git branch -M main
git push --set-upstream origin git:github.com:<username>/<repo-name>.git // git=:github... is ssh
git push - u origin master

# List all remotes
git remote -v

# To stage changes in current working dir
git add .

# To stage all changes for commit:
git add --all

# To stage and commit in one command
git -am "comment"

# To stage parts of code (patch) for commit:
git add -p

# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message
git commit --amend

# To edit previous commit message (new comment)
git commit --amend -m "comment"

# To edit previous commit message (keep same commit message)
git commit --amend --no-edit

# To revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>

# To stash changes locally, this will keep the changes in a separate changelist
# called stash and the working directory is cleaned. You can apply changes
# from the stash anytime
git stash

# To stash changes with a message
git stash save "message"

# To list all the stashed changes
git stash list

# To apply the most recent change and remove the stash from the stash list
git stash pop

# To apply any stash from the list of stashes. This does not remove the stash
# from the stash list
git stash apply stash@{6}

# To removed staged and working directory changes
git reset --hard

# To go 2 commits back
git reset --hard HEAD~2

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git

# To push a tag to remote:
git push origin <tagname>

# To force a push:
git push -f

# Overwrite remote code with ur local (dangerously)
git push origin master --force

# To delete the branch <branch>:
git branch -D branch_name

# To change branch name
git branch -M branch_name

# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# To see who commited which line in a file
git blame filename

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit

# Change remote URL (The syntax is: git remote set-url REMOTE-ID REMOTE-URL)
git remote set-url upstream git@foobar.com:jigarius/toggl2redmine.git

##############################################
########## Push to multiple remotes ##########
##############################################
Now that you have a primary remote repo and other remotes as well, it’s time to configure the push. The objective is to push to multiple Git remotes with a single git push command.

To do this, choose a remote ID which will refer to all the remotes. I usually call it all, but there are developers who prefer origin. The idea is to add all the remote repo URLs as  “push URLs” to this remote. Here’s what you do:

# Create a new remote called "all" with the URL of the primary repo.
git remote add all git@github.com:jigarius/toggl2redmine.git
# Re-register the remote as a push URL.
git remote set-url --add --push all git@github.com:jigarius/toggl2redmine.git
# Add a push URL to a remote. This means that "git push" will also push to this git URL.
git remote set-url --add --push all git@bitbucket.org:jigarius/toggl2redmine.git
If you don’t want to create an extra remote named all, you can skip the first command and use the remote origin instead of all in the subsequent command(s).

Now, you can push to all remote repositories with a single command!

# Replace BRANCH with the name of the branch you want to push.
git push all BRANCH

################################################
########## Pull from multiple remotes ##########
################################################
It is not possible to git pull from multiple repos. However, you can git fetch from multiple repos with the following command:

git fetch --all
This will fetch information from all remote repos. You can switch to the latest version of a branch on a particular remote with the command:

# Checkout the branch you want to work with.
git checkout BRANCH
# Reset the branch to match the state as on a specific remote.
git reset --hard REMOTE-ID/BRANCH
###############################################

# Show git Log (commits etc)
git log

# Show git Log with graph
git log --graph --oneline --decorate

# Show last 5 commits log with graph
git log -5 --graph --oneline --decorate

# To view the commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch

# To import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k

# Show log from commit 837238 to 320ffs with graph
git log HEAD --graph --oneline 837238..320ffs

# Getting commits since a given date
git log --pretty=format:"%h - %an, %ar : %s" --since=2.weeks

# Showing commits since a given tag/version until now
git log --pretty="%h - %s (%an)" 1.44.16..HEAD

# show git log with fzf preview
 git log --graph --color=always --abbrev-commit --pretty=format:'%C(auto)%h%d %s %C(dim white)- %an, %ar%Creset' | fzf --ansi --preview='git show {2}'

# Listing only [FEATURE] commits
git log --pretty="%h - %s (%an)" 1.44.16..HEAD | grep -i -E "^.{13}(\[INTERNAL\]|\[FEATURE\]|\[FIX\]|\[DOC\])*\[feature\]"

# Listing [FEATURE] commits since a given tag without using a hard coded tag
git describe --tags --abbrev=0

# To view commits that will be pushed
git log @{u}..

# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# To perform an interactive rebase
git rebase -i --interactive

# To perform an interactive rebase for the prior 7 commits
git rebase -i --interactive @~7

# to diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index path/to/file/A path/to/file/B

# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master

# To pull down a remote branch, but rebase any locally differing commits onto
# the top of the incoming commits:
git pull <remote> <branch> --rebase

# To update all your submodules
git submodule update --init --recursive

# To perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

# To unshallow a clone
git pull --unshallow


######################################################
##################### special ########################
######################################################
# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

#################################################################################################
## The git checkout command lets you navigate around a Git repository.                         ##
## You can check out a previous commit in a repository or a branch, collectively called “refs.”##
#################################################################################################
# Switch to a New Branch
git checkout <branch>

# To move to the previous branch in Git:
git checkout

# To create a bare branch (one that has no commits on it)
git checkout --orphan branch_name

# To checkout a new branch from a different starting point
git checkout -b master upstream/master

# To remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin

# To prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')

# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool

# To undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file

# To revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>

# To pick a commit from a branch to current branch. This is different than merge as
# this just applies a single commit from a branch to current branch
git cherry-pick <commit SHA1>


### git-bisect - Use binary search to find the commit that introduced a bug

# Starting git bisect
git bisect start

# good
git bisect good

# bad
git bisect bad

# Show git bisect bad
git bisect bad (commit)
