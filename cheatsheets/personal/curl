########## Basic #######################

# Download a single file
curl http://path.to.the/file

# Download a file and specify a new filename
curl http://example.com/file.zip -o new_file.zip

# Downloading file and creating dirs
curl https:://example.com/files --create-dirs

# Download multiple files
curl -O URLOfFirstFile -O URLOfSecondFile

# trace URL  (-I header -L redirect)
curl --silent -I -L shorturl.at/dfIJQ | grep -i "location"

# Download URLs From a File
xargs -n 1 curl -O < listurls.txt

# Download all sequentially numbered files (1-24)
curl http://example.com/pic[1-24].jpg

# Download a file and pass HTTP Authentication
curl -u username:password URL

# Download a file with a Proxy
curl -x proxysever.server.com:PORT http://addressiwantto.access

# Download a file from FTP
curl -u username:password -O ftp://example.com/pub/file.zip

# Get an FTP directory listing
curl ftp://username:password@example.com
curl ftp://url --user myname:mypassword

# Resume a previously failed download
curl -C - -o partial_file.zip http://example.com/file.zip

# Fetch only the HTTP headers from a response
curl -I http://example.com

# Fetch the HTTP headers and body response
curl -i http://example.com

# Fetch your external IP and network info as JSON
curl http://ifconfig.me/all.json

# Limit the rate of a download
curl --limit-rate 1000B -O http://path.to.the/file

# Get your global IP
curl httpbin.org/ip

# Save output to `index.html`
curl https://www.devdungeon.com > index.html

# Get only the HTTP status code
curl -o /dev/null -w '%{http_code}\n' -s -I URL

# Check Certificate
curl -vvI https://host
curl --insecure -vvI https://www.example.com 2>&1 | awk 'BEGIN { cert=0 } /^\* SSL connection/ { cert=1 } /^\*/ { if (cert) print }'

######### API USE ###############################
-X 		HTTP  method
-d  	        data (for sending data (POST method))
POST	        Create a resource
GET		Read a resource
PUT		Update a resource
DELETE	        Delete a resource

######### curl usage hints #######################

# content type header
-H "Content-Type: application/x-www-form-urlencoded"

-H "Content-Type: application/json"

# data
form urlencoded: -d "param1=value1&param2=value2" or -d @data.txt json: -d '{"key1":"value1", "key2":"value2"}' or -d @data.json

## POST application/x-www-form-urlencoded

# application/x-www-form-urlencoded is the default:
curl -d "param1=value1&param2=value2" -X POST http://localhost:3000/data

# explicit:
curl -d "param1=value1&param2=value2" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://localhost:3000/data

# with a data file
curl -d "@data.txt" -X POST http://localhost:3000/data

## POST application/json

curl -d '{"key1":"value1", "key2":"value2"}' -H "Content-Type: application/json" -X POST http://localhost:3000/data

# with a data file
curl -d "@data.json" -X POST http://localhost:3000/data


######### API CURL AUTH ##########################

# To tell curl to use a user and password for authentication
curl --user name:password http://www.example.com
curl -u 'bob:12345' https://google.com/login
curl -H 'bob:12345' https://google.com/login

# To tell curl to use a user and password for authentication via HTTP Proxy
curl --proxy-user proxyuser:proxypassword curl.haxx.se

######### API GET ###############################

# Query an API endpoint (making GET call)
curl "https://gitlab.com/api/v4/projects"


################# Get Data form API #############
# API output full
curl https://catfact.ninja/facts | jq "."

# API output second cildrenkey
curl https://catfact.ninja/facts | jq ".links[2]"

# API output mutliple values from 2nd array
curl https://catfact.ninja/facts | jq ".links[2] | .url,.label"


########## API POST #################################

# Send data to a receiving service
curl -d 'id=9&name=baeldung' http://localhost:8082/spring-rest/foos/new

# pass a file containing the request body to the data option
curl -d @request.json -H "Content-Type: application/json" http://localhost:8082/spring-rest/foos/new

# Send data in JSON format, specifying the appropriate content-type header:
curl -d '{"name":"bob"}' -H 'Content-Type: application/json' http://example.com/users/1234

########## API PUT #################################

# This method is very similar to POST.
# But we use it when we want to send a new version of an existing resource

curl -d @request.json -H 'Content-Type: application/json' -X PUT http://localhost:8082/spring-rest/foos/9

########## API Delete #################################

# DELETE removes a resource
curl -X DELETE https://jsonplaceholder.typicode.com/posts/1

############## COSTUM HEADERS ############################

# We can replace the default headers or add our own headers.
# For instance, to change the Host header, we do this:
curl -H "Host: com.baeldung" http://example.com/


# To switch off the User-Agent header, we put in an empty value:
curl -H "User-Agent:" http://example.com/

############ STATUS CODE #######################################
200 OK			Successful get, patch (return a JSON object)
201 Created		Successful post (return a JSON object)
202 Accepted		Successful post, delete, path - async
204 No content		Successful delete
206 Partial content	Successful get - async


###########################################
Dateiupload
Mit cURL lassen sich auch Dateiuploads durchf√ºhren. Dies funktioniert sowohl mit HTTP- als auch mit FTP-Servern. Der folgende Befehl schiebt eine Datei auf einen FTP-Server in das Verzeichnis foo:

curl -T datei.name ftp://www.example.com/foo/

Viele Server wollen auch Zugangsdaten haben (geht auch bei Downloads):

curl -T datei.name -u username:password ftp://www.example.com/foo/
