---
syntax: bash
tags: [ bash, bash_loop, programming ]
---

# basic loop
for i in 1 2 3 4 5 6 7 8 9 10
do
  echo $i
done

## one liner
for name [ [ in [ word ... ] ] ; ] do list ; done
for i 2 3 4 5 in *; do echo $i; done

# Loop only 2 times
for i in 1 2; do echo hello; done

# Loop Create 10 txt files
for i in {1..10}; do touch $i.txt; done;

# Loop the entire text file
for i in $(cat test.txt); do echo $i; done

# loop whole dir and echo txt files
for i in *.*; do echo $i;done

# loop ping over ip list in iplist.txt
for ip in $(cat test.txt); ping $ip


# loop specified number of times: the brace expansion
for n in {1 2 3 4 5 6 7};
do
   echo $n
done

# loop specified number of times: the brace expansion
for i in {1..10}
do
  echo $i
done

# loop through file lines
for i in LINE
  do
    echo "foo"
done

# in 1 Line
for i in {1..100}; do echo $PATH; done

# loop ls command results
for var in `ls -alF`
do
  echo $var
done

# loop over all the JPG files in the current directory
for jpg_file in *.jpg
do
  echo $jpg_file
done

# loop specified number of times
for i in `seq 1 10`
do
  echo $i
done

# loop specified number of times: the C/C++ style
for ((i=1;i<=10;++i))
do
  echo $i
done

# loop over ip list in iplist.txt
for ip in $(cat iplist.txt; do nmap -sS -p 80 -T4 $ip & done


# Loops with Arrays
fruits=("blueberry" "peach" "mango" "pineapple" "papaya") 

for n in ${fruits[@]}; 
do
    echo $n
done

# ‘Continue’ statement with Bash For Loop
for n in {1..10}
do
        if [[ $n -eq '6' ]]
        then
              echo "Target $n has been reached"
              continue
        fi
        echo $n
done

# Use the ‘break’ statement with Bash For Loop
for n in {1..10}
do
        if [[ $n -eq '6' ]]
        then
                echo "Target $n has been reached"
                break
        fi
        echo $n
done
echo "All done"

