######## Basic ##################
-v : verbose
-r : copies data recursively (but donâ€™t preserve timestamps and permission while transferring data
-a : archive mode, archive mode allows copying files recursively and it also preserves symbolic links, file permissions, user & group ownerships and timestamps
-z : compress file data
-h : human-readable, output numbers in a human-readable format
####################################################################

# Copy a Remote Directory to a Local Machine
 rsync -avzh root@192.168.0.100:/home/foo/bar /tmp/foo.txt

# Copy files from local to remote
rsync -avzh /source host:/dest

# Copy with preserve attributes
rsync -avAHX

# Copy a Remote Directory to a Local Machine and exlude folder
 rsync -avzh --exclude "dockervolume" User@Remote:~/foo

# Copy a Remote Directory to a Local Machine and exlude mutliple folder
 rsync -avzh --exclude= {'file1.txt','dir1/*','dir2'} User@Remote:~/foo

# Copy a Remote Directory to a Local Machine and exlude specific File
 rsync -avzh --exclude= *.txt User@Remote:~/foo

# Let's say you want to exclude all other files and directories except the files ending with .jpg
# When using multiple include/exclude option, the first matching rule applies.
rsync -avzh --include='*.jpg' --include='*/' --exclude='*' src_directory/ dst_directory/

# Copy file from local to remote over ssh with non standard port 1234 to destination folder in remoteuser's home directory
rsync -avz -e "ssh -p1234" /source/file1 remoteuser@X.X.X.X:~/destination/
rsync -avzhe ssh backup.tar root@192.168.0.100:/backups/

# To copy files from remote to local, maintaining file properties and sym-links (-a), zipping for faster transfer (-z), verbose (-v).
rsync -avz host:file1 :file1 /dest/
rsync -avz /source host:/dest

# Use the specified authentication key, instead of typing a password
# (The key can be generated by ssh-keygen, and the public key should be placed
# in remote's authorized_keys, e.g. using ssh-copy-id)
rsync -avz -e "ssh -i ~/.ssh/id_rsa" <src> <dest>

# Log into remote as a user, but promote to root, to access privileged files
rsync -avz --rsync-path="sudo rsync" user@<src> <dest>

# Copy files using checksum (-c) rather than time to detect if the file has changed. (Useful for validating backups).
rsync -avc /source/ /dest/

# Copy contents of /src/foo to destination:
# This command will create /dest/foo if it does not already exist
rsync -auv /src/foo /dest

# Explicitly copy /src/foo to /dest/foo
rsync -auv /src/foo/ /dest/foo
