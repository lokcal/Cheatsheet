---
tags: [ database, Postgres, psql ]
---

# psql is the PostgreSQL terminal interface. The following commands were tested on version 9.5.
# Connection options:
# -U username (if not specified current OS user is used).
# -p port.
# -h server hostname/address.
# pg_dump = single Database
# pg_dumpall = all Database  with roles,user,etc

\l to get a list of all databases
\c <db> connect to a Database
\d to check the list of relations 

# complete Syntax to create a DB 
CREATE DATABASE db_name
OWNER =  role_name
TEMPLATE = template			
ENCODING = encoding			
LC_COLLATE = collate			
LC_CTYPE = ctype
TABLESPACE = tablespace_name
CONNECTION LIMIT = max_concurrent_connection

# Connect to a specific database:
psql -U postgres -h serverAddress -d dbName

# Create Database
create database mydb IF NOT EXISTS

# create a database
sudo -u postgres psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE kaizen;"

# To create a database music which supports the ISO-8859-1 character set:
CREATE DATABASE music ENCODING 'LATIN1' 

# Create user
sudo -u postgres createuser <username>

# Create user with pass
create user myuser with encrypted password 'mypass';

# Grant privilieges
grant all privileges on database mydb to myuser;

# Get databases on a server:
psql -U postgres -h serverAddress --list

# Execute sql query and save output to file:
psql -U postgres -d dbName -c 'select * from tableName;' -o fileName

# Execute query and get tabular html output:
psql -U postgres -d dbName -H -c 'select * from tableName;'

# Execute query and save resulting rows to csv file:
psql -U postgres -d dbName -t -A -P fieldsep=',' -c 'select * from tableName;' -o fileName.csv

# Read commands from file:
psql -f fileName

## Create #######

# Create a new database
CREATE DATABASE [IF NOT EXISTS] Databasename;

# Create a new role:
CREATE ROLE role_name;

# Create a new role with a username and password:
CREATE ROLE username NOINHERIT LOGIN PASSWORD password;

# Database users can interact, modify, update, and see databases.
# In PostgreSQL they're called roles. To create a new user from the PostgreSQL console run:
CREATE ROLE my_user WITH LOGIN PASSWORD 'my_password';

# PostgreSQL roles may own one or more database. 
# Once you create a role you can assign an entire database to it:
CREATE DATABASE my_database WITH OWNER my_user;

# Change role for the current session to the new_role:
SET ROLE new_role;

# Allow role_1 to set its role as role_2:
GRANT role_2 TO role_1;

# If you want to give a user the ability to create new databases, run:
ALTER USER my_user CREATEDB;

# Connect to a database
\connect Databasename
\c Databasename

#### List #####################

# List all the databases
\list
\l

# List all schemas
\dn

# List all views
\dv

# list all its tables
\dt

# more information on tables in the current database
\dt+

# Get detailed information on a table.
\d+ table_name

# List all users:
\du

# To describe a table
\d table_name

#### Drop  ####


# delete a database
DROP DATABASE [IF EXISTS] Databasename;

# delete a database
sudo -u postgres psql -h localhost -p 5432 -U postgres -c "DROP DATABASE kaizen;"

# quiting Postgres
\q

#### Select ######

# Query all data from a table:
SELECT * FROM table_name;

# Query data from specified columns of all rows in a table:
SELECT column_list
FROM table;

# Query data and select only unique rows:
SELECT DISTINCT (column)
FROM table;

# Query data from a table with a filter:
SELECT *
FROM table
WHERE condition;

# Assign an alias to a column in the result set:
SELECT column_1 AS new_column_1, ...
FROM table;

# Query data using the LIKE operator:
SELECT * FROM table_name
WHERE column LIKE '%value%'

# Query data using the BETWEEN operator:
SELECT * FROM table_name
WHERE column BETWEEN low AND high;

# Query data using the IN operator:
SELECT * FROM table_name
WHERE column IN (value1, value2,...);

# Constrain the returned rows with the LIMIT clause:
SELECT * FROM table_name
LIMIT limit OFFSET offset
ORDER BY column_name;

# Query data from multiple using the inner join, left join, full outer join, cross join and natural join:
SELECT * 
FROM table1
INNER JOIN table2 ON conditions

SELECT * 
FROM table1
LEFT JOIN table2 ON conditions

SELECT * 
FROM table1
FULL OUTER JOIN table2 ON conditions

SELECT * 
FROM table1
CROSS JOIN table2;

SELECT * 
FROM table1
NATURAL JOIN table2;

# Return the number of rows of a table.
SELECT COUNT (*)
FROM table_name;

# Sort rows in ascending or descending order:
SELECT select_list
FROM table
ORDER BY column ASC [DESC], column2 ASC [DESC],...;

# Group rows using GROUP BY clause.
SELECT *
FROM table
GROUP BY column_1, column_2, ...;

# Filter groups using the HAVING clause.
SELECT *
FROM table
GROUP BY column_1
HAVING condition;

#### Alter #########
# Add a new column to a table:
ALTER TABLE table_name ADD COLUMN new_column_name TYPE;

# Drop a column in a table:
ALTER TABLE table_name DROP COLUMN column_name;

# Rename a column:
ALTER TABLE table_name RENAME column_name TO new_column_name;

# Set or remove a default value for a column:
ALTER TABLE table_name ALTER COLUMN [SET DEFAULT value | DROP DEFAULT]

# Add a primary key to a table.
ALTER TABLE table_name ADD PRIMARY KEY (column,...);

Remove the primary key from a table.
ALTER TABLE table_name 
DROP CONSTRAINT primary_key_constraint_name;

# Rename a table.
ALTER TABLE table_name RENAME TO new_table_name;

#### Drop #########

# Drop a table and its dependent objects:
DROP TABLE [IF EXISTS] table_name CASCADE;


#### Modifying data #### 

# Insert a new row into a table:
INSERT INTO table(column1,column2,...)
VALUES(value_1,value_2,...);

# Insert multiple rows into a table:
INSERT INTO table_name(column1,column2,...)
VALUES(value_1,value_2,...),
      (value_1,value_2,...),
      (value_1,value_2,...)...

# Update data for all rows:
UPDATE table_name
SET column_1 = value_1,
    ...;

# Update data for a set of rows specified by a condition in the WHERE clause.
UPDATE table
SET column_1 = value_1,
    ...
WHERE condition;

# Delete all rows of a table:

DELETE FROM table_name;

# Delete specific rows based on a condition:
DELETE FROM table_name
WHERE condition;

##### Set operations ######

# Combine the result set of two or more queries with UNION operator:
SELECT * FROM table1
UNION
SELECT * FROM table2;

# Minus a result set using EXCEPT operator:
SELECT * FROM table1
EXCEPT
SELECT * FROM table2;

# Get intersection of the result sets of two queries:
SELECT * FROM table1
INTERSECT
SELECT * FROM table2;

############### Backup & Restore ##########################
# Backup single Table
psql -U <username> -t <table_name> -d <dbname> -1 -f <filename>.sql

# backup database named `anitya`, add CREATE statement
sudo -u postgres pg_dump -C anitya > anitya.dump

# Backup Databse
psql -U <username> -d <dbname> -1 -f <filename>.sql
pg_dump -h {{host}} -p {{port}} {{db_name}} > {{output_file.sql}}
pg_dump -U <username> -W <password> -d <dbname> > output.sql/dump/bak
pg_dump -h <host> -p <port> <db_name> | gzip /backup.gz
pg_dump tecmintdb | gzip > tecmintdb.gz

# restore database
sudo -u postgres pqsql -f anitya.dump

# Backup Remote PostgreSQL
 pg_dump -U tecmint -h 10.10.20.10 -p 5432 tecmintdb > tecmintdb.sql

# dump a database directly from one server to another, use the pg_dump and psql utilities as shown.
 pg_dump -U tecmint -h 10.10.20.10 tecmintdb | pqsl -U tecmint -h 10.10.20.30 tecmintdb

# The split command allows you to split the output into smaller files that are acceptable in size to the underlying file system. 
# For example, to make chunks of 1 megabyte:
pg_dump dbname | split -b 1m - filename

# Restore with Split dump
cat filename* | psql dbname

# Restore databases from file:
psql -f fileName.backup postgres

# Restore Database (if zipped first unzip) 
psql -h host_name -p port_number database_name < database.sql
gunzip -c filename.gz | psql dbname

# Backup all Database (pg_dumpall) in Docker with gzipped
docker exec -t <containername> pg_dumpall -c -U <username> | gzip > ./dump_$(date +"%Y-%m-%d_%H_%M_%S").gz

# Back up all Docker PostgreSQL databases
docker exec -i postgres /usr/bin/pg_dumpall -U <postgresql_user> > postgres-backup.sql

# The Docker backup command for a local or remote PostgreSQL database is:
docker exec -i postgres /usr/bin/pg_dump -U <postgresql_user> <postgresql_database> > postgres-backup.sql 

# Back up and compress a Docker PostgreSQL database with gzip
docker exec -i postgres /usr/bin/pg_dump -U <postgresql_user> <postgresql_database> | gzip -9 > postgres-backup.sql.gz 

# Example when using a PostgreSQL password
docker exec -i -e PGPASSWORD=<postgresql_password> postgres /usr/bin/pg_dump -U <postgresql_user> <postgresql_database> | gzip -9 > postgres-backup.sql.gz 

# Back up PostgreSQL inside docker container
docker exec <postgresql_container> /bin/bash -c "/usr/bin/pg_dump -U <postgresql_user> <postgresql_database>" | gzip -9 > postgres-backup.sql.gz  

# Restore Database in Docker with gzipped
# first gunzip for unzipping
cat your_dump.sql | docker exec -i your-db-container psql -U <username>

#### Performance ######

# Show the query plan for a query:
EXPLAIN query;

# Show and execute the query plan for a query:
EXPLAIN ANALYZE query;

# Collect statistics:
ANALYZE table_name;
