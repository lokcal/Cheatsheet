# Print file metadata etc.
ffmpeg -i path/to/file.ext

# create a gif
ffmpeg -f x11grab -i :0 foo.gif

# Convert all m4a files to mp3
for f in *.m4a; do ffmpeg -i "$f" -acodec libmp3lame -vn -b:a 320k "${f%.m4a}.mp3"; done

# Convert mp3 to wav
ffmpeg -i input.mp3 output.wav

# Basic conversion
ffmpeg -i in.mp4 out.avi

# Convert video from .foo to .bar
# -g : GOP, for searchability
ffmpeg -i input.foo -vcodec bar -acodec baz -b:v 21000k -b:a 320k -g 150 -threads 4 output.bar

# Remux an MKV file into MP4
ffmpeg -i in.mkv -c:v copy -c:a copy out.mp4

# Convert image sequence to video
ffmpeg -r 18 -pattern_type glob -i '*.png' -b:v 21000k -s hd1080 -vcodec vp9 -an -pix_fmt yuv420p -deinterlace output.ext

# Combine video and audio into one file
ffmpeg -i video.ext -i audio.ext -c:v copy -c:a copy output.ext

# High-quality encoding
ffmpeg -i in.mp4 -preset slower -crf 18 out.mp4 #The lower crf, the higher the quality (range: 0-51). The default value is 23, and visually lossless compression corresponds to -crf 18

# Listen to 10 seconds of audio from a video file
#
# -ss : start time
# -t  : seconds to cut
# -autoexit : closes ffplay as soon as the audio finishes
ffmpeg -ss 00:34:24.85 -t 10 -i path/to/file.mp4 -f mp3 pipe:play | ffplay -i pipe:play -autoexit

# Trimming Without re-encoding:
#-ss specifies the start time, e.g. 00:01:23.000 or 83 (in seconds)
#-t specifies the duration of the clip (same format).
# Recent ffmpeg also has a flag to supply the end time with -to.
#-c copy copies the first video, audio, and subtitle bitstream from the input to the output file without re-encoding them. This won't harm the quality and make the command run within seconds.
ffmpeg -ss [start] -i in.mp4 -t [duration] -c copy out.mp4

# Triming With re-encoding:
ffmpeg -ss [start] -i in.mp4 -t [duration] -c:v libx264 -c:a aac -strict experimental -b:a 128k out.mp4

# Mux video and audio from another video
# With -c copy the streams will be stream copied, not re-encoded, so there will be no quality loss. If you want to re-encode, see FFmpeg Wiki: H.264 Encoding Guide.
# The -shortest option will cause the output duration to match the duration of the shortest input stream.
# See the -map option documentation for more info.
ffmpeg -i in0.mp4 -i in1.mp4 -c copy -map 0:0 -map 1:1 -shortest out.mp4

# Concat demuxer - First, make a text file.
file 'in1.mp4'
file 'in2.mp4'
file 'in3.mp4'
file 'in4.mp4
# then, run ffmpeg:
ffmpeg -f concat -i list.txt -c copy out.mp4

# Rotate a video
# Rotate 90 clockwise:
ffmpeg -i in.mov -vf "transpose=1" out.mov
# For the transpose parameter you can pass:
# 0 = 90CounterCLockwise and Vertical Flip (default)
# 1 = 90Clockwise
# 2 = 90CounterClockwise
# 3 = 90Clockwise and Vertical Flip
# Use -vf "transpose=2,transpose=2" for 180 degrees.

# Download "Transport Stream" video streams
# 1.Locate the playlist file, e.g. using Chrome > F12 > Network > Filter: m3u8
# 2.Download and concatenate the video fragments:
ffmpeg -i "path_to_playlist.m3u8" -c copy -bsf:a aac_adtstoasc out.mp4
# If you get a "Protocol 'https not on whitelist 'file,crypto'!" error, add the protocol_whitelist option:
ffmpeg -protocol_whitelist "file,http,https,tcp,tls" -i "path_to_playlist.m3u8" -c copy -bsf:a aac_adtstoasc out.mp4

#Mute some of the audio
# To replace the first 90 seconds of audio with silence:
ffmpeg -i in.mp4 -vcodec copy -af "volume=enable='lte(t,90)':volume=0" out.mp4
# To replace all audio between 1'20" and 1'30" with silence:
ffmpeg -i in.mp4 -vcodec copy -af "volume=enable='between(t,80,90)':volume=0" out.mp4

# Burn subtitles
# First convert the subtitles to .ass format:
ffmpeg -i sub.srt sub.ass
# Then add them using a video filter:
ffmpeg -i in.mp4 -vf ass=sub.ass out.mp4

# Create a video slideshow from images
# -r marks the image framerate (inverse time of each image); -vf fps=25 marks the true framerate of the output.
ffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 -pix_fmt yuv420p out.mp4

# Extract images from a video
# Extract all frames: ffmpeg -i input.mp4 thumb%04d.jpg -hide_banner
# Extract a frame each second: ffmpeg -i input.mp4 -vf fps=1 thumb%04d.jpg -hide_banner
# Extract only one frame: ffmpeg -i input.mp4 -ss 00:00:10.000 -vframes 1 thumb.jpg

# Display the frame number on each frame
ffmpeg -i in.mov -vf "drawtext=fontfile=arial.ttf: text=%{n}: x=(w-tw)/2: y=h-(2*lh): fontcolor=white: box=1: boxcolor=0x00000099: fontsize=72" -y out.mov

# Metadata: Change the title
ffmpeg -i in.mp4 -map_metadata -1 -metadata title="My Title" -c:v copy -c:a copy out.mp4
